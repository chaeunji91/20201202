<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="www.dream.com.board.model.mapper.ReplyMapper">
	<resultMap id="replyResultMap"
		type="www.dream.com.board.model.ReplyVO"
		extends="www.dream.com.framework.model.mapper.FrameworkMapper.commonMngInfoResultMap">
		
		<constructor>
			<idArg column="id" javaType="long" />
		</constructor>
		<result property="content" column="content" />
		<association property="writer" column="writer_id" resultMap="www.dream.com.party.model.mapper.PartyMapper.partyResultMap" columnPrefix="w_">
		</association>
		<discriminator javaType="String" column="obj_type">
			<case value="post" resultMap="postResultMap" />
		</discriminator>
	</resultMap>
	<resultMap id="postResultMap"
		type="www.dream.com.board.model.PostVO" extends="replyResultMap">
		<result property="title" column="title" />
	</resultMap>
	<resultMap id="replyWithReplyResultMap"
		type="www.dream.com.board.model.ReplyVO"
		extends="www.dream.com.framework.model.mapper.FrameworkMapper.commonMngInfoResultMap">
		
		<constructor>
			<idArg column="id" javaType="long" />
		</constructor>
		<result property="content" column="content" />
		<association property="writer" column="writer_id" resultMap="www.dream.com.party.model.mapper.PartyMapper.partyResultMap" columnPrefix="w_">
		</association>
		<!-- Composition 관계, 1:N -->
		<collection property="listReplies" resultMap="replyResultMap" columnPrefix="r_">
		</collection>
		<discriminator javaType="String" column="obj_type">
			<case value="post" resultMap="postWithReplyResultMap" />
		</discriminator>
	</resultMap>
	<resultMap id="postWithReplyResultMap"
		type="www.dream.com.board.model.PostVO" extends="replyWithReplyResultMap">
		<result property="title" column="title" />
		<result property="boardId" column="board_id" />
	</resultMap>
	
	<sql id="searchSql">
	<where>
			<if test="criteria.searchArr != null">
			p.id in(
		    	  select reply_id
		    		from M_HT_Reply m
		    	   where m.hash_tag_id in (
		    	   		 SELECT id
				  		   FROM T_Hash_Tag
				   		  START WITH word in 
				   		  <foreach item="word" collection="criteria.searchArr" open="(" separator="," close=")">
				   		  	word = #{word}
				   		  </foreach>
				 		CONNECT BY PRIOR id = super_id)
		    	  )
			</if>
			and p.board_id = #{boardId}
	   		and obj_type = 'post'
		</where>
	</sql>
	
	<select id="countTotalPostWithPaging" resultMap="long">
	<![CDATA[
		select count(P.*)
		  from T_Reply p
	]]>
		<include refid="searchSql"></include>
	</select>


	<select id="findPostWithPaging" resultMap="replyResultMap">
	<![CDATA[
	 select *
	   from ( 
			select  rownum rn, p.id, p.content, p.writer_id, p.obj_type, p.title, p.reg_date, p.update_date, 
				   w.id w_id, w.name w_name, w.party_type w_party_type
			  from T_Reply p
			  	   left outer join T_Party w on p.writer_id = w.id
	]]>
		<include refid="searchSql"></include>
	<![CDATA[		  	   
			   and rownum <= #{criteria.limit}
			 order by p.id desc
			)
	  where rn > #{criteria.offset}
	]]>
	</select>
	
	<select id="findAllPostWithReply" resultMap="replyWithReplyResultMap">
	<![CDATA[
		select p.id, p.content, p.writer_id, p.obj_type, p.title, p.reg_date, p.update_date, 
			   w.id w_id, w.name w_name, w.party_type w_party_type,
			   r.id r_id, r.content r_content, r.obj_type r_obj_type, r.reg_date r_reg_date, r.update_date r_update_date,
			   rw.id r_w_id, rw.name r_w_name, rw.party_type r_w_party_type
		  from T_Reply p
		  	   left outer join T_Party w on p.writer_id = w.id
		  	   left outer join T_Reply r on p.id = r.original_id
		  	   left outer join T_Party rw on r.writer_id = rw.id
		 where P.board_id = #{boardId}
		   and P.obj_type = 'post'
	]]>
	</select>
	
	
	<select id="findAllReply" resultMap="replyResultMap">
	<![CDATA[
		select r.id, r.content, r.writer_id, r.obj_type, r.title, r.reg_date, r.update_date, 
			   w.id w_id, w.name w_name, w.party_type w_party_type
		  from T_Reply r
		  	   left outer join T_Party w on r.writer_id = w.id
		 where r.original_id = #{originalId}
	]]>
	</select>
	
	<select id="findReplyWithReply" resultMap="replyWithReplyResultMap">
	<![CDATA[
		select r.id, r.content, r.writer_id, r.obj_type, r.reg_date, r.update_date, 
			   w.id w_id, w.name w_name, w.party_type w_party_type,
			   rr.id r_id, rr.content r_content, rr.obj_type r_obj_type, rr.reg_date r_reg_date, rr.update_date r_update_date,
			   rw.id r_w_id, rw.name r_w_name, rw.party_type r_w_party_type
		  from T_Reply r
		  	   left outer join T_Party w on r.writer_id = w.id
		  	   left outer join T_Reply rr on r.id = rr.original_id
		  	   left outer join T_Party rw on rr.writer_id = rw.id
		 where r.id = #{id}
	]]>
	</select>
	
	<select id="findReplyById" resultMap="replyWithReplyResultMap">
	<![CDATA[
		select p.id, p.content, p.writer_id, p.obj_type, p.title, p.reg_date, p.update_date, p.board_id, 
			   w.id w_id, w.name w_name, w.party_type w_party_type,
			   r.id r_id, r.content r_content, r.obj_type r_obj_type, r.reg_date r_reg_date, r.update_date r_update_date,
			   rw.id r_w_id, rw.name r_w_name, rw.party_type r_w_party_type
		  from T_Reply p
		  	   left outer join T_Party w on p.writer_id = w.id
		  	   left outer join T_Reply r on p.id = r.original_id
		  	   left outer join T_Party rw on r.writer_id = rw.id
		 where P.id = #{id}
	]]>
	</select>
	
	<insert id="registerPost"> <!-- p204, 190 -->
		<selectKey keyProperty="id" order="BEFORE" resultType="long">
			select seq4Reply_id.nextval from dual
		</selectKey>
		<![CDATA[
		insert into T_Reply(id, title, content, writer_id, obj_type, board_id)
			   values(#{id}, #{title,  jdbcType=VARCHAR}, #{content,  jdbcType=VARCHAR}, #{writer.id}, 'post', #{boardId})
		]]>
	</insert>
	<update id="updatePost">
	<![CDATA[
	   update T_Reply
	      set title = #{title}, 
	          content = #{content},
	          update_date = sysdate
	    where id = #{id}
	]]>
	</update>
	
	<delete id="removePost">
	<![CDATA[
	   delete from T_Reply
	    where id = #{id}
	]]>
	</delete>
</mapper>